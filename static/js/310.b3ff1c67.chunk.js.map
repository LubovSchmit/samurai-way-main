{"version":3,"file":"static/js/310.b3ff1c67.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,iBAAmB,kCAAkC,iBAAmB,kCAAkC,cAAgB,iCCA1I,EAAwC,4C,UCAxC,GAAgB,gBAAkB,gCAAgC,OAAS,wB,SCa9DA,EAAS,SAACC,GACnB,OACI,gBAAKC,UAAWC,EAAAA,gBAAhB,UAEI,gBAAKD,UAAWC,EAAAA,OAAhB,UAII,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAIC,gBAAiBH,EAAAA,OAAtD,SACKF,EAAMM,YCZdC,EAAe,SAACP,GAEzB,IAAIQ,EAAeR,EAAMS,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAACZ,EAAD,CAAmBO,KAAMK,EAAEL,KAAMF,GAAIO,EAAEP,IAA1BO,EAAEP,OAE7D,OAAQ,gBAAKH,UAAWC,EAAhB,SAA8CM,KCd1D,EAAoC,oCCApC,EAAmC,kCAAnC,EAA+E,yBCQlEI,EAAU,SAACZ,GACpB,OACI,gBAAKC,UAAWC,EAAhB,UAEI,gBAAKD,UAAWC,EAAhB,SACKF,EAAMa,aCHVC,EAAW,SAACd,GAGrB,IAAIe,EAAmBf,EAAMgB,SACxBN,KAAI,SAAAO,GAAC,OAAI,SAACL,EAAD,CAAoBR,GAAIa,EAAEb,GAAIS,QAASI,EAAEJ,SAA3BI,EAAEb,OAE9B,OACI,gBAAKH,UAAWC,EAAhB,SACKa,K,uCCbPG,GAAeC,EAAAA,EAAAA,GAAiB,KAoBzBC,GAAsBC,EAAAA,EAAAA,GAAU,CACzCC,KAAM,wBADyBD,EAnBZ,SAACrB,GACpB,OACI,kBAAMuB,SAAUvB,EAAMwB,aAAtB,WAEI,0BACI,SAACC,EAAA,EAAD,CAAOnB,KAAM,iBACNoB,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBY,YAAa,0BAGxB,0BACI,sD,mBCWhB,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACC,GACnB,MAAO,CACHxB,YAAawB,EAAMC,YAAYzB,YAC/BO,SAAUiB,EAAMC,YAAYlB,aAIX,SAACmB,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAWD,SAQ5BE,EAAAA,EAFJ,ECduB,SAACvC,GASpB,OACI,iBAAKC,UAAWC,EAAAA,iBAAhB,WAEI,gBAAKD,UAAWC,EAAAA,iBAAhB,UACI,SAACK,EAAD,CAAcE,YAAaT,EAAMS,iBAErC,gBAAKR,UAAWC,EAAAA,cAAhB,UACI,SAACY,EAAD,CAAUE,SAAUhB,EAAMgB,cAE9B,gBAAKf,UAAWC,EAAAA,wBAAhB,UACI,SAACkB,EAAD,CAAqBG,SAlBhB,SAACiB,GACyB,KAAnCA,EAASH,eAAeI,QAC5BzC,EAAMoC,YAAYI,EAASH","sources":["webpack://samurai-way/./src/pages/main/content/dialogs/Dialogs.module.scss?6b24","webpack://samurai-way/./src/pages/main/content/dialogs/dialogs-items/DialogsItems.module.scss?6212","webpack://samurai-way/./src/pages/main/content/dialogs/dialogs-items/dialog/Dialog.module.scss?9c5e","pages/main/content/dialogs/dialogs-items/dialog/Dialog.tsx","pages/main/content/dialogs/dialogs-items/DialogsItems.tsx","webpack://samurai-way/./src/pages/main/content/dialogs/messages/Messages.module.scss?be94","webpack://samurai-way/./src/pages/main/content/dialogs/messages/message/Message.module.scss?f15e","pages/main/content/dialogs/messages/message/Message.tsx","pages/main/content/dialogs/messages/Messages.tsx","pages/main/content/dialogs/AddNewPostReduxForm.tsx","pages/main/content/dialogs/DialogsContainer.tsx","pages/main/content/dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__3Zcc2\",\"dialogItemsBlock\":\"Dialogs_dialogItemsBlock__-cyVi\",\"messagesBlock\":\"Dialogs_messagesBlock__71+Ac\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogsItemsContainer\":\"DialogsItems_dialogsItemsContainer__a6n3k\",\"dialog\":\"DialogsItems_dialog__5lqYP\",\"active\":\"DialogsItems_active__VBxYR\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogContainer\":\"Dialog_dialogContainer__qb-4G\",\"dialog\":\"Dialog_dialog__Rs4YS\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport style from './Dialog.module.scss';\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    key: string,\r\n    name: string,\r\n    id: string\r\n}\r\n\r\n\r\nexport const Dialog = (props: PropsType) => {\r\n    return (\r\n        <div className={style.dialogContainer}>\r\n\r\n            <div className={style.dialog}>\r\n\r\n                {/*<img className={style.personalAva}/>*/}\r\n\r\n                <NavLink to={'/dialogs/' + props.id} activeClassName={style.active}>\r\n                    {props.name}\r\n                </NavLink>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './DialogsItems.module.scss';\r\nimport {Dialog} from './dialog/Dialog';\r\nimport {DialogNameType} from '../../../../../redux/reduxStore/reduxStore';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    dialogNames: Array<DialogNameType>\r\n}\r\n\r\nexport const DialogsItems = (props: PropsType) => {\r\n\r\n    let dialogsNames = props.dialogNames.map(d => <Dialog key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    return (<div className={style.dialogsItemsContainer}>{dialogsNames}</div>)\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"Messages_messagesContainer__N5aYE\",\"message\":\"Messages_message__kySBQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__5DyPD\",\"message\":\"Message_message__EVMht\"};","import React from 'react';\r\nimport style from './Message.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: PropsType) => {\r\n    return (\r\n        <div className={style.messageContainer}>\r\n\r\n            <div className={style.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Messages.module.scss';\r\nimport {Message} from './message/Message';\r\nimport {MessageType} from '../../../../../redux/reduxStore/reduxStore';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    messages: Array<MessageType>,\r\n}\r\n\r\nexport const Messages = (props: PropsType) => {\r\n\r\n\r\n    let messagesElements = props.messages\r\n        .map(m => <Message key={m.id} id={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={style.messagesContainer}>\r\n            {messagesElements}\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../../commun/formsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\n\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field name={'newMessageBody'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength100]}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button> Send message</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)","import React from 'react';\r\nimport {addMessage} from '../../../../redux/reducers/dialogsReducer/dialogsReducer';\r\nimport {DialogsPageType, DispatchType, StatePropsType} from '../../../../redux/reduxStore/reduxStore';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {WithAuthRedirect} from '../../../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: StatePropsType): DialogsPageType => {\r\n    return {\r\n        dialogNames: state.dialogsPage.dialogNames,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: DispatchType): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(addMessage(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect,\r\n\r\n)(Dialogs)","import React from 'react';\r\nimport style from './Dialogs.module.scss';\r\nimport {DialogsItems} from './dialogs-items/DialogsItems';\r\nimport {Messages} from './messages/Messages';\r\nimport {DialogNameType, MessageType} from '../../../../redux/reduxStore/reduxStore';\r\nimport {AddMessageReduxForm} from './AddNewPostReduxForm';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    dialogNames: Array<DialogNameType>,\r\n    messages: Array<MessageType>,\r\n    sendMessage: (newMessage: string) => void,\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: PropsType) => {\r\n    const onSubmit = (formData: any) => {\r\n        if (formData.newMessageBody.trim() === '') return\r\n        props.sendMessage(formData.newMessageBody)\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.dialogsContainer}>\r\n\r\n            <div className={style.dialogItemsBlock}>\r\n                <DialogsItems dialogNames={props.dialogNames}/>\r\n            </div>\r\n            <div className={style.messagesBlock}>\r\n                <Messages messages={props.messages}/>\r\n            </div>\r\n            <div className={style.nexMessageTextareaBlock}>\r\n                <AddMessageReduxForm onSubmit={onSubmit}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n"],"names":["Dialog","props","className","style","to","id","activeClassName","name","DialogsItems","dialogsNames","dialogNames","map","d","Message","message","Messages","messagesElements","messages","m","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","connect","state","dialogsPage","dispatch","sendMessage","newMessageBody","addMessage","WithAuthRedirect","formData","trim"],"sourceRoot":""}